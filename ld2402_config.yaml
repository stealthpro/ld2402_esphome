esphome:
  name: presence
  friendly_name: Presence Sensor
  on_boot:
    - lambda: |-
        id(relay).turn_on();
        id(is_present) = true;
        id(last_presence_time) = millis();
        ESP_LOGD("boot", "Light turned on at startup");

# Main ESP32 settings
esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Logging settings
logger:
  level: DEBUG
  baud_rate: 115200
  tx_buffer_size: 512

# Home Assistant API settings
api:
  encryption:
    key: !secret api_encryption_key

# OTA update settings
ota:
  - platform: esphome
    password: !secret ota_password

# WiFi settings
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Access point settings for initial configuration
  ap:
    ssid: "PresenceSensor"
    password: !secret wifi_password

# Enable captive portal for initial setup
captive_portal:

# Enable web server for debugging
web_server:
  port: 80

# Relay configuration
switch:
  - platform: gpio
    name: "Light"
    pin: 
      number: GPIO9
      inverted: true
      mode:
        output: true
        pullup: false
        pulldown: false
    id: relay
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - logger.log: 
          format: "Light turned on"
          level: INFO
    on_turn_off:
      - logger.log:
          format: "Light turned off"
          level: INFO

  - platform: template
    name: "Manual Mode"
    id: manual_mode_switch
    optimistic: true
    on_turn_on:
      - lambda: |-
          id(manual_mode) = true;
          if (!id(relay).state) {
            id(relay).turn_on();
          }
      - logger.log: 
          format: "Manual mode enabled"
          level: INFO
    on_turn_off:
      - lambda: |-
          id(manual_mode) = false;
          if (!id(is_present) && id(relay).state) {
            id(relay).turn_off();
          }
      - logger.log: 
          format: "Manual mode disabled"
          level: INFO

# Global variables for sensor operation
globals:
  # Current distance from sensor
  - id: last_distance
    type: float
    initial_value: '999'
  
  # Time of last presence detection
  - id: last_presence_time
    type: uint32_t
    initial_value: '0'
  
  # Minimum distance for presence detection (cm)
  - id: min_distance
    type: float
    initial_value: '50'
  
  # Maximum distance for presence detection (cm)
  - id: max_distance
    type: float
    initial_value: '200'
  
  # Auto-off timeout (ms)
  - id: presence_timeout
    type: uint32_t
    initial_value: '30000'

  # Presence state
  - id: is_present
    type: bool
    initial_value: 'false'

  # Manual control mode
  - id: manual_mode
    type: bool
    initial_value: 'false'

# UART configuration for sensor communication
uart:
  id: uart_bus
  tx_pin: GPIO4
  rx_pin: GPIO5
  baud_rate: 115200
  data_bits: 8
  parity: NONE
  stop_bits: 1

# Distance sensor
sensor:
  - platform: template
    name: "Distance"
    id: distance_sensor
    unit_of_measurement: "cm"
    accuracy_decimals: 0
    update_interval: 1s
    lambda: |-
      // Buffer for reading UART data
      static uint8_t buffer[16];
      static size_t buffer_pos = 0;
      
      // Read data from UART
      while (id(uart_bus).available() > 0) {
        if (id(uart_bus).read_array(&buffer[buffer_pos], 1)) {
          // Process string when newline character is received
          if (buffer[buffer_pos] == '\n') {
            buffer[buffer_pos] = '\0';
            
            // Check if this is a distance message (dis)
            if (buffer[0] == 'd' && buffer[1] == 'i' && buffer[2] == 's') {
              // Parse distance value
              float distance = atof((char*)&buffer[9]);
              id(last_distance) = distance;
              
              // Update presence state
              id(is_present) = distance >= id(min_distance) && distance <= id(max_distance) && distance != 999.0;
              
              // If presence detected, update time
              if (id(is_present)) {
                id(last_presence_time) = millis();
                
                // If not in manual mode, turn on relay
                if (!id(manual_mode) && !id(relay).state) {
                  id(relay).turn_on();
                }
              }
            }
            
            // Reset buffer position
            buffer_pos = 0;
          } 
          // Add character to buffer if it's not a carriage return
          else if (buffer[buffer_pos] != '\r' && buffer_pos < sizeof(buffer) - 1) {
            buffer_pos++;
          }
        }
      }
      
      return id(last_distance);

# Presence binary sensor
binary_sensor:
  - platform: template
    name: "Presence"
    id: presence_sensor
    device_class: occupancy
    filters:
      - delayed_on: 500ms
      - delayed_off: 500ms
    lambda: |-
      return id(is_present);

# Timer for automatic relay turn-off
interval:
  - interval: 1s
    then:
      - if:
          condition:
            and:
              # Check if relay is on
              - lambda: 'return id(relay).state;'
              # Check if enough time has passed
              - lambda: 'return (millis() - id(last_presence_time)) >= id(presence_timeout);'
              # Check if not in manual mode
              - lambda: 'return !id(manual_mode);'
          then:
            # Turn off relay and update presence state
            - lambda: |-
                id(is_present) = false;
            - switch.turn_off: relay 
